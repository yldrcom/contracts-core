// Automatically generated by forge bind-json.

pragma solidity >=0.6.2 <0.9.0;
pragma experimental ABIEncoderV2;

import {BaseProposalGenerator} from "script/BaseProposalGenerator.sol";
import {MerkleClaimArgs} from "script/ClaimMerkle.s.sol";
import {ConfigScript} from "script/Config.s.sol";

interface Vm {
    function parseJsonTypeArray(string calldata json, string calldata key, string calldata typeDescription)
        external
        pure
        returns (bytes memory);
    function parseJsonType(string calldata json, string calldata typeDescription)
        external
        pure
        returns (bytes memory);
    function parseJsonType(string calldata json, string calldata key, string calldata typeDescription)
        external
        pure
        returns (bytes memory);
    function serializeJsonType(string calldata typeDescription, bytes memory value)
        external
        pure
        returns (string memory json);
    function serializeJsonType(
        string calldata objectKey,
        string calldata valueKey,
        string calldata typeDescription,
        bytes memory value
    ) external returns (string memory json);
}

library JsonBindings {
    Vm constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));

    string constant schema_MultiSigCall = "MultiSigCall(address target,bytes data)";
    string constant schema_MerkleClaimArgs =
        "MerkleClaimArgs(address[] users,address[] tokens,uint256[] amounts,bytes32[][] proofs)";
    string constant schema_InitReserveArgs =
        "InitReserveArgs(address provider,address underlying,address interestRateStrategy,address yTokenImpl,address variableDebtImpl,address priceFeed,uint256 ltv,uint256 liquidationThreshold,uint256 liquidationBonus,uint256 reserveFactor,uint256 liquidationProtocolFee,address treasury,bool enableBorrowing)";

    function serialize(BaseProposalGenerator.MultiSigCall memory value) internal pure returns (string memory) {
        return vm.serializeJsonType(schema_MultiSigCall, abi.encode(value));
    }

    function serialize(BaseProposalGenerator.MultiSigCall memory value, string memory objectKey, string memory valueKey)
        internal
        returns (string memory)
    {
        return vm.serializeJsonType(objectKey, valueKey, schema_MultiSigCall, abi.encode(value));
    }

    function deserializeMultiSigCall(string memory json)
        public
        pure
        returns (BaseProposalGenerator.MultiSigCall memory)
    {
        return abi.decode(vm.parseJsonType(json, schema_MultiSigCall), (BaseProposalGenerator.MultiSigCall));
    }

    function deserializeMultiSigCall(string memory json, string memory path)
        public
        pure
        returns (BaseProposalGenerator.MultiSigCall memory)
    {
        return abi.decode(vm.parseJsonType(json, path, schema_MultiSigCall), (BaseProposalGenerator.MultiSigCall));
    }

    function deserializeMultiSigCallArray(string memory json, string memory path)
        public
        pure
        returns (BaseProposalGenerator.MultiSigCall[] memory)
    {
        return
            abi.decode(vm.parseJsonTypeArray(json, path, schema_MultiSigCall), (BaseProposalGenerator.MultiSigCall[]));
    }

    function serialize(MerkleClaimArgs memory value) internal pure returns (string memory) {
        return vm.serializeJsonType(schema_MerkleClaimArgs, abi.encode(value));
    }

    function serialize(MerkleClaimArgs memory value, string memory objectKey, string memory valueKey)
        internal
        returns (string memory)
    {
        return vm.serializeJsonType(objectKey, valueKey, schema_MerkleClaimArgs, abi.encode(value));
    }

    function deserializeMerkleClaimArgs(string memory json) public pure returns (MerkleClaimArgs memory) {
        return abi.decode(vm.parseJsonType(json, schema_MerkleClaimArgs), (MerkleClaimArgs));
    }

    function deserializeMerkleClaimArgs(string memory json, string memory path)
        public
        pure
        returns (MerkleClaimArgs memory)
    {
        return abi.decode(vm.parseJsonType(json, path, schema_MerkleClaimArgs), (MerkleClaimArgs));
    }

    function deserializeMerkleClaimArgsArray(string memory json, string memory path)
        public
        pure
        returns (MerkleClaimArgs[] memory)
    {
        return abi.decode(vm.parseJsonTypeArray(json, path, schema_MerkleClaimArgs), (MerkleClaimArgs[]));
    }

    function serialize(ConfigScript.InitReserveArgs memory value) internal pure returns (string memory) {
        return vm.serializeJsonType(schema_InitReserveArgs, abi.encode(value));
    }

    function serialize(ConfigScript.InitReserveArgs memory value, string memory objectKey, string memory valueKey)
        internal
        returns (string memory)
    {
        return vm.serializeJsonType(objectKey, valueKey, schema_InitReserveArgs, abi.encode(value));
    }

    function deserializeInitReserveArgs(string memory json) public pure returns (ConfigScript.InitReserveArgs memory) {
        return abi.decode(vm.parseJsonType(json, schema_InitReserveArgs), (ConfigScript.InitReserveArgs));
    }

    function deserializeInitReserveArgs(string memory json, string memory path)
        public
        pure
        returns (ConfigScript.InitReserveArgs memory)
    {
        return abi.decode(vm.parseJsonType(json, path, schema_InitReserveArgs), (ConfigScript.InitReserveArgs));
    }

    function deserializeInitReserveArgsArray(string memory json, string memory path)
        public
        pure
        returns (ConfigScript.InitReserveArgs[] memory)
    {
        return abi.decode(vm.parseJsonTypeArray(json, path, schema_InitReserveArgs), (ConfigScript.InitReserveArgs[]));
    }
}
